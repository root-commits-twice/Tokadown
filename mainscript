#!/usr/bin/env python3


"""
Tokadown by root-commits-twice, version 0,211a
"""

import math
import os
import PySimpleGUI as sg
import pickle
import time
# todo add countdown
# todo fix code (make it shorter)
# build using command: pyinstaller.exe --onefile --windowed --icon=Images\myicon.ico tokadown.py


def main():
    while True:
        main_window()


def main_window():
    sg.theme('DarkAmber')
    # todo change theme to something more fitting
    layout = [
        [sg.Text('Shutdown:', size=(10, 1)), sg.Button('Shutdown', size=(15, 1))
         ],
        [sg.Text('Abort:', size=(10, 1)), sg.Button('Abort', size=(15, 1))
         ],
        [sg.Text('Tokadown, by Toka', size=(25, 1), key=('output'))
         ],
        [sg.Button('Exit', size=(5, 1)), sg.Button('Settings', size=(5, 1)), sg.Button('Modes', size=(5, 1))]]

    window = sg.Window('Tokadown v0.211a', layout)
    # todo add custom icon
    while True:
        event, values = window.read()
        if event in (None, 'Exit'):
            exit(0)
        elif event in ('Shutdown'):
            try:
                data = pickle.load(open("save.p", "rb"))
                minutes = data[0]
                # loads data file
            except:
                minutes = 5
                data = minutes
                pickle.dump(data, open("save.p", "wb"))
                data = pickle.load(open("save.p", "rb"))
                minutes = data[0]
                # if no data file is present a new is created
            if os.name == 'nt':
                os.system("Shutdown /t {0} /s".format(int(minutes)*60))
                # the windows shutdown command
            else:
                os.system("shutdown -h {0}".format(minutes))
                # the linux shutdown command
            window.FindElement('output').Update("Shutting down in {0} minutes".format(minutes))
            # finds the output and updates it with the text
        elif event in ('Abort shutdown'):
            if os.name == 'nt':
                os.system('shutdown /a')
                # the windows abort command
            else:
                os.system('shutdown -c')
                # the linux abort command
            window.FindElement('output').Update("Shutdown aborted")
        elif event in ('Settings'):
            settings_window()

    window.close()


def settings_window():
    # todo find better way to implement settings (maybe single window?)
    sg.theme('DarkAmber')
    layout = [
        [sg.Text('Enter time to shutdown', size=(30, 1))
         ],
        [sg.Text('Minutes:', size=(20, 1)), sg.Input('5', size=(4, 1), key=('minutes'))
         ],
        [sg.Text('Countdown:', size=(20, 1)), sg.Checkbox('', key=('countdown'))
         ],
        [sg.Text('Low CPU use shutdown:', size=(20, 1)), sg.Checkbox('', key=('cpu'))
         ],
        [sg.Text('Max CPU usage:', size=(20, 1)), sg.Input('10', size=(4, 1), key=('cpu_usage')), sg.Text('%')
         ],
        [sg.Text('', size=(25, 1), key=('output'))
         ],
        [sg.Button('Close', size=(5, 1)), sg.Button('Save', size=(5, 1)), sg.Button('Apply', size=(5, 1))]]

    window = sg.Window('Settings', layout, auto_size_text=True)
    while True:
        event, values = window.read()
        if event in (None, 'Close'):
            break
        elif event in 'Save':
            minutes = values['minutes']
            countdown = values['countdown']
            data = (minutes, countdown)
            pickle.dump(data, open("save.p", "wb"))
            window.FindElement('output').Update("Saved settings")
            # saves new settings to data file
        elif event in 'Apply':
            minutes = values['minutes']
            countdown = values['countdown']
            data = (minutes, countdown)
            pickle.dump(data, open("save.p", "wb"))
            window.FindElement('output').Update("Applied settings")
            # saves new settings to data file
            break

    window.close()


def modes_window():
    # todo add modes window here
    # modes include stuff like: steam mode, download mode all that stuff.
    print("not finished")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit(0)
